@page
@model RazorPages_PRN222.Pages.Admin.LessonsModel
@{
    ViewData["Title"] = "Manage Lessons";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2 class="mb-0">
                    <i class="fas fa-book-open me-2"></i>Manage Lessons
                </h2>
                <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addLessonModal">
                    <i class="fas fa-plus me-1"></i>Add New Lesson
                </button>
            </div>

            <!-- Course Filter -->
            <div class="card mb-3">
                <div class="card-body p-3">
                    <div class="row g-2">
                        <div class="col-12 col-md-6">
                            <label for="courseFilter" class="form-label small">Filter by Course:</label>
                            <select id="courseFilter" class="form-select form-select-sm" onchange="filterLessons()">
                                <option value="">All Courses</option>
                                @foreach (var course in Model.Courses)
                                {
                                    <option value="@course.CourseId">@course.Title</option>
                                }
                            </select>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="lessonTypeFilter" class="form-label small">Filter by Type:</label>
                            <select id="lessonTypeFilter" class="form-select form-select-sm" onchange="filterLessons()">
                                <option value="">All Types</option>
                                <option value="Video">Video</option>
                                <option value="Article">Article</option>
                                <option value="Quiz">Quiz</option>
                                <option value="Assignment">Assignment</option>
                                <option value="Download">Download</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Lessons Table -->
            <div class="card">
                <div class="card-body p-3">
                    @if (!Model.Lessons.Any())
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-book-open fa-2x text-muted mb-2"></i>
                            <h5>No lessons yet</h5>
                            <p class="text-muted">Create your first lesson to get started.</p>
                            <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addLessonModal">
                                <i class="fas fa-plus me-1"></i>Add First Lesson
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover table-sm">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Title</th>
                                        <th>Course</th>
                                        <th>Type</th>
                                        <th>Duration</th>
                                        <th>Order</th>
                                        <th>Preview</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var lesson in Model.Lessons.OrderBy(l => l.CourseId).ThenBy(l => l.SortOrder))
                                    {
                                        <tr data-course-id="@lesson.CourseId" data-lesson-type="@lesson.LessonType">
                                            <td>
                                                <strong>@lesson.Title</strong>
                                                @if (!string.IsNullOrEmpty(lesson.Description))
                                                {
                                                    <br>
                                                    <small class="text-muted">@(lesson.Description.Length > 40 ? lesson.Description.Substring(0, 40) + "..." : lesson.Description)</small>
                                                }
                                            </td>
                                            <td>@(lesson.Course?.Title ?? "Unknown")</td>
                                            <td>
                                                <span class="badge bg-secondary small">@lesson.LessonType</span>
                                            </td>
                                            <td>@(lesson.Duration?.ToString() ?? "N/A") min</td>
                                            <td>@lesson.SortOrder</td>
                                            <td>
                                                @if (lesson.IsPreview == true)
                                                {
                                                    <span class="badge bg-warning text-dark small">Preview</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary small">Locked</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button class="btn btn-outline-primary btn-sm" onclick="editLesson(@lesson.LessonId)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteLesson(@lesson.LessonId)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Compact Add Lesson Modal -->
<div class="modal fade" id="addLessonModal" tabindex="-1" aria-labelledby="addLessonModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header py-2">
                <h6 class="modal-title" id="addLessonModalLabel">
                    <i class="fas fa-plus me-2"></i>Add New Lesson
                </h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" asp-page-handler="AddLesson" id="addLessonForm" novalidate>
                @Html.AntiForgeryToken()
                <div class="modal-body p-3">
                    <div class="row g-2">
                        <div class="col-6">
                            <label class="form-label small">Course </label>
                            <select class="form-select form-select-sm" id="courseId" name="CourseId" required>
                                <option value="">Select Course</option>
                                @foreach (var course in Model.Courses)
                                {
                                    <option value="@course.CourseId">@course.Title</option>
                                }
                            </select>
                        </div>
                        <div class="col-6">
                            <label class="form-label small">Type </label>
                            <select class="form-select form-select-sm" id="lessonType" name="LessonType" required>
                                <option value="">Select Type</option>
                                <option value="Video">Video</option>
                                <option value="Article">Article</option>
                                <option value="Quiz">Quiz</option>
                                <option value="Assignment">Assignment</option>
                                <option value="Download">Download</option>
                            </select>
                        </div>
                    </div>
                    <div class="mt-2">
                        <label for="title" class="form-label small">Title </label>
                        <input type="text" class="form-control form-control-sm" id="title" name="Title" required>
                    </div>
                    <div class="mt-2">
                        <label for="description" class="form-label small">Description</label>
                        <textarea class="form-control form-control-sm" id="description" name="Description" rows="2"></textarea>
                    </div>
                    <div class="row g-2 mt-1">
                        <div class="col-4">
                            <label for="duration" class="form-label small">Duration (min)</label>
                            <input type="number" class="form-control form-control-sm" id="duration" name="Duration" min="1">
                        </div>
                        <div class="col-4">
                            <label for="sortOrder" class="form-label small">Order </label>
                            <input type="number" class="form-control form-control-sm" id="sortOrder" name="SortOrder" value="1" min="1" required>
                        </div>
                        <div class="col-4">
                            <div class="form-check mt-4">
                                <input class="form-check-input" type="checkbox" id="isPreview" name="IsPreview" value="true">
                                <label class="form-check-label small" for="isPreview">Preview</label>
                            </div>
                        </div>
                    </div>
                    <div class="mt-2">
                        <label for="contentUrl" class="form-label small">Content URL</label>
                        <input type="url" class="form-control form-control-sm" id="contentUrl" name="ContentUrl">
                    </div>
                </div>
                <div class="modal-footer py-2">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary btn-sm" id="saveLessonBtn">
                        <i class="fas fa-save me-1"></i>Save
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Compact Edit Lesson Modal -->
<div class="modal fade" id="editLessonModal" tabindex="-1" aria-labelledby="editLessonModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header py-2">
                <h6 class="modal-title" id="editLessonModalLabel">
                    <i class="fas fa-edit me-2"></i>Edit Lesson
                </h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" asp-page-handler="UpdateLesson" id="editLessonForm" novalidate>
                @Html.AntiForgeryToken()
                <input type="hidden" id="editLessonId" name="LessonId" />
                <div class="modal-body p-3">
                    <div class="row g-2">
                        <div class="col-6">
                            <label class="form-label small">Course </label>
                            <select class="form-select form-select-sm" id="editCourseId" name="CourseId" required>
                                <option value="">Select Course</option>
                                @foreach (var course in Model.Courses)
                                {
                                    <option value="@course.CourseId">@course.Title</option>
                                }
                            </select>
                        </div>
                        <div class="col-6">
                            <label class="form-label small">Type </label>
                            <select class="form-select form-select-sm" id="editLessonType" name="LessonType" required>
                                <option value="">Select Type</option>
                                <option value="Video">Video</option>
                                <option value="Article">Article</option>
                                <option value="Quiz">Quiz</option>
                                <option value="Assignment">Assignment</option>
                                <option value="Download">Download</option>
                            </select>
                        </div>
                    </div>
                    <div class="mt-2">
                        <label for="editTitle" class="form-label small">Title </label>
                        <input type="text" class="form-control form-control-sm" id="editTitle" name="Title" required>
                    </div>
                    <div class="mt-2">
                        <label for="editDescription" class="form-label small">Description</label>
                        <textarea class="form-control form-control-sm" id="editDescription" name="Description" rows="2"></textarea>
                    </div>
                    <div class="row g-2 mt-1">
                        <div class="col-4">
                            <label for="editDuration" class="form-label small">Duration (min)</label>
                            <input type="number" class="form-control form-control-sm" id="editDuration" name="Duration" min="1">
                        </div>
                        <div class="col-4">
                            <label for="editSortOrder" class="form-label small">Order</label>
                            <input type="number" class="form-control form-control-sm" id="editSortOrder" name="SortOrder" min="1" required>
                        </div>
                        <div class="col-4">
                            <div class="form-check mt-4">
                                <input class="form-check-input" type="checkbox" id="editIsPreview" name="IsPreview" value="true">
                                <label class="form-check-label small" for="editIsPreview">Preview</label>
                            </div>
                        </div>
                    </div>
                    <div class="mt-2">
                        <label for="editContentUrl" class="form-label small">Content URL</label>
                        <input type="url" class="form-control form-control-sm" id="editContentUrl" name="ContentUrl">
                    </div>
                </div>
                <div class="modal-footer py-2">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary btn-sm" id="updateLessonBtn">
                        <i class="fas fa-save me-1"></i>Update
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .table-sm th, .table-sm td {
        padding: 0.5rem;
        font-size: 0.875rem;
    }

    .badge.small {
        font-size: 0.7rem;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
    }

    .form-select-sm, .form-control-sm {
        font-size: 0.8rem;
        padding: 0.25rem 0.5rem;
    }

    .form-label.small {
        font-size: 0.8rem;
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .modal-dialog {
        max-width: 600px;
    }

    .modal-body {
        max-height: 70vh;
        overflow-y: auto;
    }

</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        if (typeof bootstrap === 'undefined') {
            console.error('Bootstrap is not loaded!');
            return;
        }
        console.log('Bootstrap loaded successfully');
    });

    function filterLessons() {
        const courseFilter = document.getElementById('courseFilter').value;
        const typeFilter = document.getElementById('lessonTypeFilter').value;
        const rows = document.querySelectorAll('tbody tr');

        rows.forEach(row => {
            const courseId = row.getAttribute('data-course-id');
            const lessonType = row.getAttribute('data-lesson-type');

            const courseMatch = !courseFilter || courseId === courseFilter;
            const typeMatch = !typeFilter || lessonType === typeFilter;

            if (courseMatch && typeMatch) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }

    function editLesson(lessonId) {
        console.log(`Fetching lesson ID: ${lessonId}`);
        fetch(`/Admin/Lessons?handler=Lesson&id=${lessonId}`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        })
        .then(response => {
            console.log(`Response status: ${response.status}`);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Received lesson data:', data);
            document.getElementById('editLessonId').value = data.lessonId || '';
            document.getElementById('editCourseId').value = data.courseId || '';
            document.getElementById('editTitle').value = data.title || '';
            document.getElementById('editDescription').value = data.description || '';
            document.getElementById('editLessonType').value = data.lessonType || '';
            document.getElementById('editDuration').value = data.duration || '';
            document.getElementById('editSortOrder').value = data.sortOrder || '';
            document.getElementById('editContentUrl').value = data.contentUrl || '';
            document.getElementById('editIsPreview').checked = data.isPreview ?? false;

            const modalElement = document.getElementById('editLessonModal');
            const modal = new bootstrap.Modal(modalElement);
            modal.show();

            setTimeout(() => {
                enableModalElements(modalElement);
            }, 100);
        })
        .catch(error => {
            console.error('Error fetching lesson data:', error);
            const errorDiv = document.createElement('div');
            errorDiv.className = 'alert alert-danger mt-3';
            errorDiv.textContent = `Failed to load lesson ${lessonId}. Please try again.`;
            document.querySelector('.container').prepend(errorDiv);
        });
    }

    function deleteLesson(lessonId) {
        if (confirm('Are you sure you want to delete this lesson?')) {
            var form = document.createElement('form');
            form.method = 'POST';
            form.action = '?handler=DeleteLesson&lessonId=' + lessonId;

            var token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            var tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = token;
            form.appendChild(tokenInput);

            document.body.appendChild(form);
            form.submit();
        }
    }

    // Form validation for Add Lesson
    document.getElementById('addLessonForm').addEventListener('submit', function(event) {
        if (!this.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
        }

        this.classList.add('was-validated');

        if (this.checkValidity()) {
            const saveBtn = document.getElementById('saveLessonBtn');
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Saving...';
        }
    });

    // Form validation for Edit Lesson
    document.getElementById('editLessonForm').addEventListener('submit', function(event) {
        if (!this.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
        }

        this.classList.add('was-validated');

        if (this.checkValidity()) {
            const updateBtn = document.getElementById('updateLessonBtn');
            updateBtn.disabled = true;
            updateBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Updating...';
        }
    });

    // Reset forms when modals are closed
    document.getElementById('addLessonModal').addEventListener('hidden.bs.modal', function() {
        const form = document.getElementById('addLessonForm');
        form.reset();
        form.classList.remove('was-validated');
        const saveBtn = document.getElementById('saveLessonBtn');
        saveBtn.disabled = false;
        saveBtn.innerHTML = '<i class="fas fa-save me-1"></i>Save';
    });

    document.getElementById('editLessonModal').addEventListener('hidden.bs.modal', function() {
        const form = document.getElementById('editLessonForm');
        form.reset();
        form.classList.remove('was-validated');
        const updateBtn = document.getElementById('updateLessonBtn');
        updateBtn.disabled = false;
        updateBtn.innerHTML = '<i class="fas fa-save me-1"></i>Update';
    });

    function enableModalElements(modal) {
        const elements = modal.querySelectorAll('input, select, textarea, button');
        elements.forEach(element => {
            element.removeAttribute('disabled');
            element.style.pointerEvents = 'auto';
            element.style.userSelect = 'auto';
        });

        modal.style.pointerEvents = 'auto';
        const modalContent = modal.querySelector('.modal-content');
        if (modalContent) {
            modalContent.style.pointerEvents = 'auto';
        }
    }
</script>